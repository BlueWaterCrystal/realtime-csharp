### YamlMime:ManagedReference
items:
- uid: Supabase.Realtime.Socket
  commentId: T:Supabase.Realtime.Socket
  id: Socket
  parent: Supabase.Realtime
  children:
  - Supabase.Realtime.Socket.#ctor(System.String,Supabase.Realtime.ClientOptions)
  - Supabase.Realtime.Socket.Connect
  - Supabase.Realtime.Socket.Disconnect(CloseStatusCode,System.String)
  - Supabase.Realtime.Socket.IsConnected
  - Supabase.Realtime.Socket.OnMessage
  - Supabase.Realtime.Socket.Push(Supabase.Realtime.SocketMessage)
  - Supabase.Realtime.Socket.StateChanged
  langs:
  - csharp
  - vb
  name: Socket
  nameWithType: Socket
  fullName: Supabase.Realtime.Socket
  type: Class
  source:
    remote:
      path: Realtime/Socket.cs
      branch: master
      repo: https://github.com/supabase/realtime-csharp.git
    id: Socket
    path: ../Realtime/Socket.cs
    startLine: 16
  assemblies:
  - Realtime
  namespace: Supabase.Realtime
  summary: "\nSocket connection handler.\n"
  example: []
  syntax:
    content: public class Socket
    content.vb: Public Class Socket
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Supabase.Realtime.Socket.IsConnected
  commentId: P:Supabase.Realtime.Socket.IsConnected
  id: IsConnected
  parent: Supabase.Realtime.Socket
  langs:
  - csharp
  - vb
  name: IsConnected
  nameWithType: Socket.IsConnected
  fullName: Supabase.Realtime.Socket.IsConnected
  type: Property
  source:
    remote:
      path: Realtime/Socket.cs
      branch: master
      repo: https://github.com/supabase/realtime-csharp.git
    id: IsConnected
    path: ../Realtime/Socket.cs
    startLine: 21
  assemblies:
  - Realtime
  namespace: Supabase.Realtime
  summary: "\nReturns whether or not the connection is alive.\n"
  example: []
  syntax:
    content: public bool IsConnected { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsConnected As Boolean
  overload: Supabase.Realtime.Socket.IsConnected*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Supabase.Realtime.Socket.StateChanged
  commentId: F:Supabase.Realtime.Socket.StateChanged
  id: StateChanged
  parent: Supabase.Realtime.Socket
  langs:
  - csharp
  - vb
  name: StateChanged
  nameWithType: Socket.StateChanged
  fullName: Supabase.Realtime.Socket.StateChanged
  type: Field
  source:
    remote:
      path: Realtime/Socket.cs
      branch: master
      repo: https://github.com/supabase/realtime-csharp.git
    id: StateChanged
    path: ../Realtime/Socket.cs
    startLine: 26
  assemblies:
  - Realtime
  namespace: Supabase.Realtime
  summary: "\nInvoked when the socket state changes.\n"
  example: []
  syntax:
    content: public EventHandler<SocketStateChangedEventArgs> StateChanged
    return:
      type: System.EventHandler{Supabase.Realtime.SocketStateChangedEventArgs}
    content.vb: Public StateChanged As EventHandler(Of SocketStateChangedEventArgs)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Supabase.Realtime.Socket.OnMessage
  commentId: F:Supabase.Realtime.Socket.OnMessage
  id: OnMessage
  parent: Supabase.Realtime.Socket
  langs:
  - csharp
  - vb
  name: OnMessage
  nameWithType: Socket.OnMessage
  fullName: Supabase.Realtime.Socket.OnMessage
  type: Field
  source:
    remote:
      path: Realtime/Socket.cs
      branch: master
      repo: https://github.com/supabase/realtime-csharp.git
    id: OnMessage
    path: ../Realtime/Socket.cs
    startLine: 31
  assemblies:
  - Realtime
  namespace: Supabase.Realtime
  summary: "\nInvoked when a message has been recieved and decoded.\n"
  example: []
  syntax:
    content: public EventHandler<SocketMessageEventArgs> OnMessage
    return:
      type: System.EventHandler{Supabase.Realtime.SocketMessageEventArgs}
    content.vb: Public OnMessage As EventHandler(Of SocketMessageEventArgs)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Supabase.Realtime.Socket.#ctor(System.String,Supabase.Realtime.ClientOptions)
  commentId: M:Supabase.Realtime.Socket.#ctor(System.String,Supabase.Realtime.ClientOptions)
  id: '#ctor(System.String,Supabase.Realtime.ClientOptions)'
  parent: Supabase.Realtime.Socket
  langs:
  - csharp
  - vb
  name: Socket(String, ClientOptions)
  nameWithType: Socket.Socket(String, ClientOptions)
  fullName: Supabase.Realtime.Socket.Socket(System.String, Supabase.Realtime.ClientOptions)
  type: Constructor
  source:
    remote:
      path: Realtime/Socket.cs
      branch: master
      repo: https://github.com/supabase/realtime-csharp.git
    id: .ctor
    path: ../Realtime/Socket.cs
    startLine: 66
  assemblies:
  - Realtime
  namespace: Supabase.Realtime
  summary: "\nInitializes this Socket instance.\n"
  example: []
  syntax:
    content: public Socket(string endpoint, ClientOptions options = null)
    parameters:
    - id: endpoint
      type: System.String
      description: ''
    - id: options
      type: Supabase.Realtime.ClientOptions
      description: ''
    content.vb: Public Sub New(endpoint As String, options As ClientOptions = Nothing)
  overload: Supabase.Realtime.Socket.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Supabase.Realtime.Socket.Connect
  commentId: M:Supabase.Realtime.Socket.Connect
  id: Connect
  parent: Supabase.Realtime.Socket
  langs:
  - csharp
  - vb
  name: Connect()
  nameWithType: Socket.Connect()
  fullName: Supabase.Realtime.Socket.Connect()
  type: Method
  source:
    remote:
      path: Realtime/Socket.cs
      branch: master
      repo: https://github.com/supabase/realtime-csharp.git
    id: Connect
    path: ../Realtime/Socket.cs
    startLine: 81
  assemblies:
  - Realtime
  namespace: Supabase.Realtime
  summary: "\nConnects to a socket server and registers event listeners.\n"
  example: []
  syntax:
    content: public void Connect()
    content.vb: Public Sub Connect
  overload: Supabase.Realtime.Socket.Connect*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Supabase.Realtime.Socket.Disconnect(CloseStatusCode,System.String)
  commentId: M:Supabase.Realtime.Socket.Disconnect(CloseStatusCode,System.String)
  id: Disconnect(CloseStatusCode,System.String)
  parent: Supabase.Realtime.Socket
  langs:
  - csharp
  - vb
  name: Disconnect(CloseStatusCode, String)
  nameWithType: Socket.Disconnect(CloseStatusCode, String)
  fullName: Supabase.Realtime.Socket.Disconnect(CloseStatusCode, System.String)
  type: Method
  source:
    remote:
      path: Realtime/Socket.cs
      branch: master
      repo: https://github.com/supabase/realtime-csharp.git
    id: Disconnect
    path: ../Realtime/Socket.cs
    startLine: 99
  assemblies:
  - Realtime
  namespace: Supabase.Realtime
  summary: "\nDisconnects from the socket server.\n"
  example: []
  syntax:
    content: public void Disconnect(CloseStatusCode code = null, string reason = "")
    parameters:
    - id: code
      type: CloseStatusCode
      description: ''
    - id: reason
      type: System.String
      description: ''
    content.vb: Public Sub Disconnect(code As CloseStatusCode = Nothing, reason As String = "")
  overload: Supabase.Realtime.Socket.Disconnect*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Supabase.Realtime.Socket.Push(Supabase.Realtime.SocketMessage)
  commentId: M:Supabase.Realtime.Socket.Push(Supabase.Realtime.SocketMessage)
  id: Push(Supabase.Realtime.SocketMessage)
  parent: Supabase.Realtime.Socket
  langs:
  - csharp
  - vb
  name: Push(SocketMessage)
  nameWithType: Socket.Push(SocketMessage)
  fullName: Supabase.Realtime.Socket.Push(Supabase.Realtime.SocketMessage)
  type: Method
  source:
    remote:
      path: Realtime/Socket.cs
      branch: master
      repo: https://github.com/supabase/realtime-csharp.git
    id: Push
    path: ../Realtime/Socket.cs
    startLine: 115
  assemblies:
  - Realtime
  namespace: Supabase.Realtime
  summary: "\nPushes formatted data to the socket server.\n\nIf the connection is not alive, the data will be placed into a buffer to be sent when reconnected.\n"
  example: []
  syntax:
    content: public void Push(SocketMessage data)
    parameters:
    - id: data
      type: Supabase.Realtime.SocketMessage
      description: ''
    content.vb: Public Sub Push(data As SocketMessage)
  overload: Supabase.Realtime.Socket.Push*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: Supabase.Realtime
  commentId: N:Supabase.Realtime
  name: Supabase.Realtime
  nameWithType: Supabase.Realtime
  fullName: Supabase.Realtime
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Supabase.Realtime.Socket.IsConnected*
  commentId: Overload:Supabase.Realtime.Socket.IsConnected
  name: IsConnected
  nameWithType: Socket.IsConnected
  fullName: Supabase.Realtime.Socket.IsConnected
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.EventHandler{Supabase.Realtime.SocketStateChangedEventArgs}
  commentId: T:System.EventHandler{Supabase.Realtime.SocketStateChangedEventArgs}
  parent: System
  definition: System.EventHandler`1
  name: EventHandler<SocketStateChangedEventArgs>
  nameWithType: EventHandler<SocketStateChangedEventArgs>
  fullName: System.EventHandler<Supabase.Realtime.SocketStateChangedEventArgs>
  nameWithType.vb: EventHandler(Of SocketStateChangedEventArgs)
  fullName.vb: System.EventHandler(Of Supabase.Realtime.SocketStateChangedEventArgs)
  name.vb: EventHandler(Of SocketStateChangedEventArgs)
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Supabase.Realtime.SocketStateChangedEventArgs
    name: SocketStateChangedEventArgs
    nameWithType: SocketStateChangedEventArgs
    fullName: Supabase.Realtime.SocketStateChangedEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Supabase.Realtime.SocketStateChangedEventArgs
    name: SocketStateChangedEventArgs
    nameWithType: SocketStateChangedEventArgs
    fullName: Supabase.Realtime.SocketStateChangedEventArgs
  - name: )
    nameWithType: )
    fullName: )
- uid: System.EventHandler`1
  commentId: T:System.EventHandler`1
  isExternal: true
  name: EventHandler<TEventArgs>
  nameWithType: EventHandler<TEventArgs>
  fullName: System.EventHandler<TEventArgs>
  nameWithType.vb: EventHandler(Of TEventArgs)
  fullName.vb: System.EventHandler(Of TEventArgs)
  name.vb: EventHandler(Of TEventArgs)
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEventArgs
    nameWithType: TEventArgs
    fullName: TEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEventArgs
    nameWithType: TEventArgs
    fullName: TEventArgs
  - name: )
    nameWithType: )
    fullName: )
- uid: System.EventHandler{Supabase.Realtime.SocketMessageEventArgs}
  commentId: T:System.EventHandler{Supabase.Realtime.SocketMessageEventArgs}
  parent: System
  definition: System.EventHandler`1
  name: EventHandler<SocketMessageEventArgs>
  nameWithType: EventHandler<SocketMessageEventArgs>
  fullName: System.EventHandler<Supabase.Realtime.SocketMessageEventArgs>
  nameWithType.vb: EventHandler(Of SocketMessageEventArgs)
  fullName.vb: System.EventHandler(Of Supabase.Realtime.SocketMessageEventArgs)
  name.vb: EventHandler(Of SocketMessageEventArgs)
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Supabase.Realtime.SocketMessageEventArgs
    name: SocketMessageEventArgs
    nameWithType: SocketMessageEventArgs
    fullName: Supabase.Realtime.SocketMessageEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Supabase.Realtime.SocketMessageEventArgs
    name: SocketMessageEventArgs
    nameWithType: SocketMessageEventArgs
    fullName: Supabase.Realtime.SocketMessageEventArgs
  - name: )
    nameWithType: )
    fullName: )
- uid: Supabase.Realtime.Socket.#ctor*
  commentId: Overload:Supabase.Realtime.Socket.#ctor
  name: Socket
  nameWithType: Socket.Socket
  fullName: Supabase.Realtime.Socket.Socket
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Supabase.Realtime.ClientOptions
  commentId: T:Supabase.Realtime.ClientOptions
  parent: Supabase.Realtime
  name: ClientOptions
  nameWithType: ClientOptions
  fullName: Supabase.Realtime.ClientOptions
- uid: Supabase.Realtime.Socket.Connect*
  commentId: Overload:Supabase.Realtime.Socket.Connect
  name: Connect
  nameWithType: Socket.Connect
  fullName: Supabase.Realtime.Socket.Connect
- uid: Supabase.Realtime.Socket.Disconnect*
  commentId: Overload:Supabase.Realtime.Socket.Disconnect
  name: Disconnect
  nameWithType: Socket.Disconnect
  fullName: Supabase.Realtime.Socket.Disconnect
- uid: CloseStatusCode
  isExternal: true
  name: CloseStatusCode
  nameWithType: CloseStatusCode
  fullName: CloseStatusCode
- uid: Supabase.Realtime.Socket.Push*
  commentId: Overload:Supabase.Realtime.Socket.Push
  name: Push
  nameWithType: Socket.Push
  fullName: Supabase.Realtime.Socket.Push
- uid: Supabase.Realtime.SocketMessage
  commentId: T:Supabase.Realtime.SocketMessage
  parent: Supabase.Realtime
  name: SocketMessage
  nameWithType: SocketMessage
  fullName: Supabase.Realtime.SocketMessage
