### YamlMime:ManagedReference
items:
- uid: Supabase.Realtime.Client
  commentId: T:Supabase.Realtime.Client
  id: Client
  parent: Supabase.Realtime
  children:
  - Supabase.Realtime.Client.Channel(System.String,System.String,System.String,System.String,System.String)
  - Supabase.Realtime.Client.Connect
  - Supabase.Realtime.Client.Disconnect(CloseStatusCode,System.String)
  - Supabase.Realtime.Client.Initialize(System.String,Supabase.Realtime.ClientAuthorization,Supabase.Realtime.ClientOptions)
  - Supabase.Realtime.Client.Instance
  - Supabase.Realtime.Client.OnClose
  - Supabase.Realtime.Client.OnError
  - Supabase.Realtime.Client.OnMessage
  - Supabase.Realtime.Client.OnOpen
  - Supabase.Realtime.Client.Options
  - Supabase.Realtime.Client.Remove(Supabase.Realtime.Channel)
  - Supabase.Realtime.Client.Socket
  langs:
  - csharp
  - vb
  name: Client
  nameWithType: Client
  fullName: Supabase.Realtime.Client
  type: Class
  source:
    remote:
      path: Realtime/Client.cs
      branch: master
      repo: https://github.com/supabase/realtime-csharp.git
    id: Client
    path: ../Realtime/Client.cs
    startLine: 15
  assemblies:
  - Realtime
  namespace: Supabase.Realtime
  summary: "\nSingleton that represents a Client connection to a Realtime Server.\n\nIt maintains a singular Websocket with asynchronous listeners (Channels).\n"
  example:
  - "\nclient = Client.Instance\n"
  syntax:
    content: public class Client
    content.vb: Public Class Client
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Supabase.Realtime.Client.Socket
  commentId: P:Supabase.Realtime.Client.Socket
  id: Socket
  parent: Supabase.Realtime.Client
  langs:
  - csharp
  - vb
  name: Socket
  nameWithType: Client.Socket
  fullName: Supabase.Realtime.Client.Socket
  type: Property
  source:
    remote:
      path: Realtime/Client.cs
      branch: master
      repo: https://github.com/supabase/realtime-csharp.git
    id: Socket
    path: ../Realtime/Client.cs
    startLine: 30
  assemblies:
  - Realtime
  namespace: Supabase.Realtime
  summary: "\nThe backing Socket class.\n\nMost methods of the Client act as proxies to the Socket class.\n"
  example: []
  syntax:
    content: public Socket Socket { get; }
    parameters: []
    return:
      type: Supabase.Realtime.Socket
    content.vb: Public ReadOnly Property Socket As Socket
  overload: Supabase.Realtime.Client.Socket*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Supabase.Realtime.Client.Options
  commentId: P:Supabase.Realtime.Client.Options
  id: Options
  parent: Supabase.Realtime.Client
  langs:
  - csharp
  - vb
  name: Options
  nameWithType: Client.Options
  fullName: Supabase.Realtime.Client.Options
  type: Property
  source:
    remote:
      path: Realtime/Client.cs
      branch: master
      repo: https://github.com/supabase/realtime-csharp.git
    id: Options
    path: ../Realtime/Client.cs
    startLine: 35
  assemblies:
  - Realtime
  namespace: Supabase.Realtime
  summary: "\nClient Options - most of which are regarding Socket connection options\n"
  example: []
  syntax:
    content: public ClientOptions Options { get; }
    parameters: []
    return:
      type: Supabase.Realtime.ClientOptions
    content.vb: Public ReadOnly Property Options As ClientOptions
  overload: Supabase.Realtime.Client.Options*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Supabase.Realtime.Client.Instance
  commentId: P:Supabase.Realtime.Client.Instance
  id: Instance
  parent: Supabase.Realtime.Client
  langs:
  - csharp
  - vb
  name: Instance
  nameWithType: Client.Instance
  fullName: Supabase.Realtime.Client.Instance
  type: Property
  source:
    remote:
      path: Realtime/Client.cs
      branch: master
      repo: https://github.com/supabase/realtime-csharp.git
    id: Instance
    path: ../Realtime/Client.cs
    startLine: 41
  assemblies:
  - Realtime
  namespace: Supabase.Realtime
  summary: "\nThe Client Instance (singleton)\n"
  example: []
  syntax:
    content: public static Client Instance { get; }
    parameters: []
    return:
      type: Supabase.Realtime.Client
    content.vb: Public Shared ReadOnly Property Instance As Client
  overload: Supabase.Realtime.Client.Instance*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: Supabase.Realtime.Client.OnOpen
  commentId: F:Supabase.Realtime.Client.OnOpen
  id: OnOpen
  parent: Supabase.Realtime.Client
  langs:
  - csharp
  - vb
  name: OnOpen
  nameWithType: Client.OnOpen
  fullName: Supabase.Realtime.Client.OnOpen
  type: Field
  source:
    remote:
      path: Realtime/Client.cs
      branch: master
      repo: https://github.com/supabase/realtime-csharp.git
    id: OnOpen
    path: ../Realtime/Client.cs
    startLine: 55
  assemblies:
  - Realtime
  namespace: Supabase.Realtime
  summary: "\nInvoked when the socket raises the `open` event.\n"
  example: []
  syntax:
    content: public EventHandler<SocketStateChangedEventArgs> OnOpen
    return:
      type: System.EventHandler{Supabase.Realtime.SocketStateChangedEventArgs}
    content.vb: Public OnOpen As EventHandler(Of SocketStateChangedEventArgs)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Supabase.Realtime.Client.OnClose
  commentId: F:Supabase.Realtime.Client.OnClose
  id: OnClose
  parent: Supabase.Realtime.Client
  langs:
  - csharp
  - vb
  name: OnClose
  nameWithType: Client.OnClose
  fullName: Supabase.Realtime.Client.OnClose
  type: Field
  source:
    remote:
      path: Realtime/Client.cs
      branch: master
      repo: https://github.com/supabase/realtime-csharp.git
    id: OnClose
    path: ../Realtime/Client.cs
    startLine: 60
  assemblies:
  - Realtime
  namespace: Supabase.Realtime
  summary: "\nInvoked when the socket raises the `close` event.\n"
  example: []
  syntax:
    content: public EventHandler<SocketStateChangedEventArgs> OnClose
    return:
      type: System.EventHandler{Supabase.Realtime.SocketStateChangedEventArgs}
    content.vb: Public OnClose As EventHandler(Of SocketStateChangedEventArgs)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Supabase.Realtime.Client.OnError
  commentId: F:Supabase.Realtime.Client.OnError
  id: OnError
  parent: Supabase.Realtime.Client
  langs:
  - csharp
  - vb
  name: OnError
  nameWithType: Client.OnError
  fullName: Supabase.Realtime.Client.OnError
  type: Field
  source:
    remote:
      path: Realtime/Client.cs
      branch: master
      repo: https://github.com/supabase/realtime-csharp.git
    id: OnError
    path: ../Realtime/Client.cs
    startLine: 65
  assemblies:
  - Realtime
  namespace: Supabase.Realtime
  summary: "\nInvoked when the socket raises the `error` event.\n"
  example: []
  syntax:
    content: public EventHandler<SocketStateChangedEventArgs> OnError
    return:
      type: System.EventHandler{Supabase.Realtime.SocketStateChangedEventArgs}
    content.vb: Public OnError As EventHandler(Of SocketStateChangedEventArgs)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Supabase.Realtime.Client.OnMessage
  commentId: F:Supabase.Realtime.Client.OnMessage
  id: OnMessage
  parent: Supabase.Realtime.Client
  langs:
  - csharp
  - vb
  name: OnMessage
  nameWithType: Client.OnMessage
  fullName: Supabase.Realtime.Client.OnMessage
  type: Field
  source:
    remote:
      path: Realtime/Client.cs
      branch: master
      repo: https://github.com/supabase/realtime-csharp.git
    id: OnMessage
    path: ../Realtime/Client.cs
    startLine: 70
  assemblies:
  - Realtime
  namespace: Supabase.Realtime
  summary: "\nInvoked when the socket raises the `message` event.\n"
  example: []
  syntax:
    content: public EventHandler<SocketStateChangedEventArgs> OnMessage
    return:
      type: System.EventHandler{Supabase.Realtime.SocketStateChangedEventArgs}
    content.vb: Public OnMessage As EventHandler(Of SocketStateChangedEventArgs)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Supabase.Realtime.Client.Initialize(System.String,Supabase.Realtime.ClientAuthorization,Supabase.Realtime.ClientOptions)
  commentId: M:Supabase.Realtime.Client.Initialize(System.String,Supabase.Realtime.ClientAuthorization,Supabase.Realtime.ClientOptions)
  id: Initialize(System.String,Supabase.Realtime.ClientAuthorization,Supabase.Realtime.ClientOptions)
  parent: Supabase.Realtime.Client
  langs:
  - csharp
  - vb
  name: Initialize(String, ClientAuthorization, ClientOptions)
  nameWithType: Client.Initialize(String, ClientAuthorization, ClientOptions)
  fullName: Supabase.Realtime.Client.Initialize(System.String, Supabase.Realtime.ClientAuthorization, Supabase.Realtime.ClientOptions)
  type: Method
  source:
    remote:
      path: Realtime/Client.cs
      branch: master
      repo: https://github.com/supabase/realtime-csharp.git
    id: Initialize
    path: ../Realtime/Client.cs
    startLine: 82
  assemblies:
  - Realtime
  namespace: Supabase.Realtime
  summary: "\nInitializes a Client instance, this method should be called prior to any other method.\n"
  example: []
  syntax:
    content: public Client Initialize(string realtimeUrl, ClientAuthorization authorization = null, ClientOptions options = null)
    parameters:
    - id: realtimeUrl
      type: System.String
      description: 'The connection url (ex: &quot;ws://localhost:4000/socket&quot; - no trailing slash required)'
    - id: authorization
      type: Supabase.Realtime.ClientAuthorization
      description: ''
    - id: options
      type: Supabase.Realtime.ClientOptions
      description: ''
    return:
      type: Supabase.Realtime.Client
      description: Client
    content.vb: Public Function Initialize(realtimeUrl As String, authorization As ClientAuthorization = Nothing, options As ClientOptions = Nothing) As Client
  overload: Supabase.Realtime.Client.Initialize*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Supabase.Realtime.Client.Connect
  commentId: M:Supabase.Realtime.Client.Connect
  id: Connect
  parent: Supabase.Realtime.Client
  langs:
  - csharp
  - vb
  name: Connect()
  nameWithType: Client.Connect()
  fullName: Supabase.Realtime.Client.Connect()
  type: Method
  source:
    remote:
      path: Realtime/Client.cs
      branch: master
      repo: https://github.com/supabase/realtime-csharp.git
    id: Connect
    path: ../Realtime/Client.cs
    startLine: 107
  assemblies:
  - Realtime
  namespace: Supabase.Realtime
  summary: "\nAttempts to connect to the socket given the params specified in `Initialize`\n"
  example: []
  syntax:
    content: public Client Connect()
    return:
      type: Supabase.Realtime.Client
      description: ''
    content.vb: Public Function Connect As Client
  overload: Supabase.Realtime.Client.Connect*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Supabase.Realtime.Client.Disconnect(CloseStatusCode,System.String)
  commentId: M:Supabase.Realtime.Client.Disconnect(CloseStatusCode,System.String)
  id: Disconnect(CloseStatusCode,System.String)
  parent: Supabase.Realtime.Client
  langs:
  - csharp
  - vb
  name: Disconnect(CloseStatusCode, String)
  nameWithType: Client.Disconnect(CloseStatusCode, String)
  fullName: Supabase.Realtime.Client.Disconnect(CloseStatusCode, System.String)
  type: Method
  source:
    remote:
      path: Realtime/Client.cs
      branch: master
      repo: https://github.com/supabase/realtime-csharp.git
    id: Disconnect
    path: ../Realtime/Client.cs
    startLine: 128
  assemblies:
  - Realtime
  namespace: Supabase.Realtime
  summary: "\nDisconnects from the socket server (if connected).\n"
  example: []
  syntax:
    content: public Client Disconnect(CloseStatusCode code = null, string reason = "Programmatic Disconnect")
    parameters:
    - id: code
      type: CloseStatusCode
      description: Status Code
    - id: reason
      type: System.String
      description: Reason for disconnect
    return:
      type: Supabase.Realtime.Client
      description: ''
    content.vb: Public Function Disconnect(code As CloseStatusCode = Nothing, reason As String = "Programmatic Disconnect") As Client
  overload: Supabase.Realtime.Client.Disconnect*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Supabase.Realtime.Client.Channel(System.String,System.String,System.String,System.String,System.String)
  commentId: M:Supabase.Realtime.Client.Channel(System.String,System.String,System.String,System.String,System.String)
  id: Channel(System.String,System.String,System.String,System.String,System.String)
  parent: Supabase.Realtime.Client
  langs:
  - csharp
  - vb
  name: Channel(String, String, String, String, String)
  nameWithType: Client.Channel(String, String, String, String, String)
  fullName: Supabase.Realtime.Client.Channel(System.String, System.String, System.String, System.String, System.String)
  type: Method
  source:
    remote:
      path: Realtime/Client.cs
      branch: master
      repo: https://github.com/supabase/realtime-csharp.git
    id: Channel
    path: ../Realtime/Client.cs
    startLine: 156
  assemblies:
  - Realtime
  namespace: Supabase.Realtime
  summary: "\nAdds a Channel subscription - if a subscription exists with the same signature, the existing subscription will be returned.\n"
  example: []
  syntax:
    content: public Channel Channel(string database = "realtime", string schema = null, string table = null, string column = null, string value = null)
    parameters:
    - id: database
      type: System.String
      description: Database to connect to, with Supabase this will likely be `realtime`.
    - id: schema
      type: System.String
      description: Postgres schema, for example, `public`
    - id: table
      type: System.String
      description: Postgres table name
    - id: column
      type: System.String
      description: Postgres column name
    - id: value
      type: System.String
      description: Value the specified column should have
    return:
      type: Supabase.Realtime.Channel
      description: ''
    content.vb: Public Function Channel(database As String = "realtime", schema As String = Nothing, table As String = Nothing, column As String = Nothing, value As String = Nothing) As Channel
  overload: Supabase.Realtime.Client.Channel*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Supabase.Realtime.Client.Remove(Supabase.Realtime.Channel)
  commentId: M:Supabase.Realtime.Client.Remove(Supabase.Realtime.Channel)
  id: Remove(Supabase.Realtime.Channel)
  parent: Supabase.Realtime.Client
  langs:
  - csharp
  - vb
  name: Remove(Channel)
  nameWithType: Client.Remove(Channel)
  fullName: Supabase.Realtime.Client.Remove(Supabase.Realtime.Channel)
  type: Method
  source:
    remote:
      path: Realtime/Client.cs
      branch: master
      repo: https://github.com/supabase/realtime-csharp.git
    id: Remove
    path: ../Realtime/Client.cs
    startLine: 175
  assemblies:
  - Realtime
  namespace: Supabase.Realtime
  summary: "\nRemoves a channel subscription.\n"
  example: []
  syntax:
    content: public void Remove(Channel channel)
    parameters:
    - id: channel
      type: Supabase.Realtime.Channel
      description: ''
    content.vb: Public Sub Remove(channel As Channel)
  overload: Supabase.Realtime.Client.Remove*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: Supabase.Realtime
  commentId: N:Supabase.Realtime
  name: Supabase.Realtime
  nameWithType: Supabase.Realtime
  fullName: Supabase.Realtime
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Supabase.Realtime.Client.Socket*
  commentId: Overload:Supabase.Realtime.Client.Socket
  name: Socket
  nameWithType: Client.Socket
  fullName: Supabase.Realtime.Client.Socket
- uid: Supabase.Realtime.Socket
  commentId: T:Supabase.Realtime.Socket
  parent: Supabase.Realtime
  name: Socket
  nameWithType: Socket
  fullName: Supabase.Realtime.Socket
- uid: Supabase.Realtime.Client.Options*
  commentId: Overload:Supabase.Realtime.Client.Options
  name: Options
  nameWithType: Client.Options
  fullName: Supabase.Realtime.Client.Options
- uid: Supabase.Realtime.ClientOptions
  commentId: T:Supabase.Realtime.ClientOptions
  parent: Supabase.Realtime
  name: ClientOptions
  nameWithType: ClientOptions
  fullName: Supabase.Realtime.ClientOptions
- uid: Supabase.Realtime.Client.Instance*
  commentId: Overload:Supabase.Realtime.Client.Instance
  name: Instance
  nameWithType: Client.Instance
  fullName: Supabase.Realtime.Client.Instance
- uid: Supabase.Realtime.Client
  commentId: T:Supabase.Realtime.Client
  parent: Supabase.Realtime
  name: Client
  nameWithType: Client
  fullName: Supabase.Realtime.Client
- uid: System.EventHandler{Supabase.Realtime.SocketStateChangedEventArgs}
  commentId: T:System.EventHandler{Supabase.Realtime.SocketStateChangedEventArgs}
  parent: System
  definition: System.EventHandler`1
  name: EventHandler<SocketStateChangedEventArgs>
  nameWithType: EventHandler<SocketStateChangedEventArgs>
  fullName: System.EventHandler<Supabase.Realtime.SocketStateChangedEventArgs>
  nameWithType.vb: EventHandler(Of SocketStateChangedEventArgs)
  fullName.vb: System.EventHandler(Of Supabase.Realtime.SocketStateChangedEventArgs)
  name.vb: EventHandler(Of SocketStateChangedEventArgs)
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Supabase.Realtime.SocketStateChangedEventArgs
    name: SocketStateChangedEventArgs
    nameWithType: SocketStateChangedEventArgs
    fullName: Supabase.Realtime.SocketStateChangedEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Supabase.Realtime.SocketStateChangedEventArgs
    name: SocketStateChangedEventArgs
    nameWithType: SocketStateChangedEventArgs
    fullName: Supabase.Realtime.SocketStateChangedEventArgs
  - name: )
    nameWithType: )
    fullName: )
- uid: System.EventHandler`1
  commentId: T:System.EventHandler`1
  isExternal: true
  name: EventHandler<TEventArgs>
  nameWithType: EventHandler<TEventArgs>
  fullName: System.EventHandler<TEventArgs>
  nameWithType.vb: EventHandler(Of TEventArgs)
  fullName.vb: System.EventHandler(Of TEventArgs)
  name.vb: EventHandler(Of TEventArgs)
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEventArgs
    nameWithType: TEventArgs
    fullName: TEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEventArgs
    nameWithType: TEventArgs
    fullName: TEventArgs
  - name: )
    nameWithType: )
    fullName: )
- uid: Supabase.Realtime.Client.Initialize*
  commentId: Overload:Supabase.Realtime.Client.Initialize
  name: Initialize
  nameWithType: Client.Initialize
  fullName: Supabase.Realtime.Client.Initialize
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Supabase.Realtime.ClientAuthorization
  commentId: T:Supabase.Realtime.ClientAuthorization
  parent: Supabase.Realtime
  name: ClientAuthorization
  nameWithType: ClientAuthorization
  fullName: Supabase.Realtime.ClientAuthorization
- uid: Supabase.Realtime.Client.Connect*
  commentId: Overload:Supabase.Realtime.Client.Connect
  name: Connect
  nameWithType: Client.Connect
  fullName: Supabase.Realtime.Client.Connect
- uid: Supabase.Realtime.Client.Disconnect*
  commentId: Overload:Supabase.Realtime.Client.Disconnect
  name: Disconnect
  nameWithType: Client.Disconnect
  fullName: Supabase.Realtime.Client.Disconnect
- uid: CloseStatusCode
  isExternal: true
  name: CloseStatusCode
  nameWithType: CloseStatusCode
  fullName: CloseStatusCode
- uid: Supabase.Realtime.Client.Channel*
  commentId: Overload:Supabase.Realtime.Client.Channel
  name: Channel
  nameWithType: Client.Channel
  fullName: Supabase.Realtime.Client.Channel
- uid: Supabase.Realtime.Channel
  commentId: T:Supabase.Realtime.Channel
  parent: Supabase.Realtime
  name: Channel
  nameWithType: Channel
  fullName: Supabase.Realtime.Channel
- uid: Supabase.Realtime.Client.Remove*
  commentId: Overload:Supabase.Realtime.Client.Remove
  name: Remove
  nameWithType: Client.Remove
  fullName: Supabase.Realtime.Client.Remove
